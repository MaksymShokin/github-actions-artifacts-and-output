name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # cache node_modules to reduce workflow time
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # linux place to install dependencies
          path: ~/.npm
          # generate key from package-lock.json file. So when it changes we discard the cache
          key: ${{ hashFiles('**/package-lock.json') }}-cache-node_modules
      - name: Install dependencies
        run: npm ci
      - name: Output content
        run: ls
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs: 
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # linux place to install dependencies
          path: ~/.npm
          # generate key from package-lock.json file. So when it changes we discard the cache
          key: ${{ hashFiles('**/package-lock.json') }}-cache-node_modules
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
        # made up example to get file name
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # files to upload
          # path: | 
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output content
        run: ls
      - name: Output js filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
